---
import LanguageController from "../../../../components/LanguageController.astro";
import Template from "../../../../template/Template.astro";

import Learns from "../../../../../public/assets/learn/learn.json";
import type { ITable, ICode, IMedia } from "../../../../interface/Learn";
import { GetTheme } from "../../../../api/learn";
import LANGS_SUPPORTED from "../../../../utils/langs";

export async function getStaticPaths() {
    return Learns.flatMap( ({id, themes}) => themes.flatMap( lesson => LANGS_SUPPORTED.flatMap(lang => ({ params: { lang, id, lesson } }))) );
}

const { lang, id, lesson } = Astro.params;
const theme = await GetTheme({ lang, id, lesson });

const title = `${theme.title} - ${id} | Brayan Téllez`;
const description = theme.resume;
const url = `https://tusitio.com/${lang}/learn/${id}/${lesson}`;
const image = '/assets/logotipe/Logo Bpp Colored.webp';
---
<Template
    includes={['learn-cover', 'lang-buttons']}
    lang={lang}
    title={`${theme.title} - ${id} | Brayan Téllez`}
    keywords={theme.keywords}
    seo={{
        title,
        description,
        og: {
            type: "article",
            title,
            description,
            url,
            image
        },
        twitter: {
            card: "summary_large_image",
            title,
            description,
            image
        },
        canonical: url
    }}
>
    <LanguageController lang={lang}/>
    <aside class="container">
        <h3>Temario.</h3>
        <ul>
            <li>
                <a href={`/${lang}/learn/${id}`}>{theme.themes.text}</a>
            </li>
            {
                theme.themes.themes.map( theme => 
                    <li>
                        <a class={theme.id === lesson ? 'current': ''} href={`/${lang}/learn/${id}/${theme.id}`}>{theme.text}</a>
                    </li>
                )
            }
        </ul>
    </aside>
    <main>
        <h1>{theme.title}</h1>
        <p>{theme.resume}</p>
        {
            Object.entries(theme.sections).map( ([ key, { section, content, content_under, extra } ]) => <div id={key}>
                <h3>{ section }</h3>
                <p><Fragment set:html={ content }/></p>
                {
                    extra ? extra.map( ({ type, ...rest }) => {
                        return type === 'img' ?
                            <figure class="img">
                                <img src={(rest as IMedia).src} alt={(rest as IMedia).alt}>
                                <figcaption>{(rest as IMedia).caption}</figcaption>
                            </figure>
                        : type === 'video' ? 
                            <figure class="video">
                                <iframe src={(rest as IMedia).src}></iframe>
                                <figcaption>{(rest as IMedia).caption}</figcaption>
                            </figure>
                        : type === 'code' ?
                            <div class="code">
                                <pre class="container">{(rest as ICode).code}</pre>
                                <span>{(rest as ICode).lang[0]}</span>
                            </div>
                        : type === 'table' ?
                            <table>
                                <thead>
                                    {
                                        (rest as ITable).headers.map( h => <th>{h}</th> )
                                    }
                                </thead>
                                <tbody>
                                    {
                                        (rest as ITable).rows.map( r => <tr>
                                            {
                                                r.map( c => <td>{c}</td> )
                                            }
                                        </tr> )
                                    }
                                </tbody>
                                <caption>{(rest as ITable).caption}</caption>
                            </table>
                        : null
                    }) : null
                }
                { content_under ?  <p><Fragment set:html={ content_under }/></p>: null }
            </div>)
        }
    </main>
    <footer>
        <button class="lang container">Anterior</button>
        <button class="lang container">Siguiente</button>
    </footer>
</Template>