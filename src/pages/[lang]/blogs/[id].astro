---
import Template from "../../../template/Template.astro";
import PostFragment from "../../../components/article/PostFragment.astro";
import Breadcrumb from "../../../components/Breadcrumb.astro";

import Blogs from "../../../../public/assets/blogs/blogs.json";

import BlogPostES from "../../../data/es/translation.json";
import BlogPostEN from "../../../data/en/translation.json";
import BlogPostCH from "../../../data/zh/translation.json";

import { GetBlog } from "../../../api/blogs";

import type { IBlogPostTranslation } from "../../../interface/AppLangs";
import type { IBlogDefinition } from "../../../interface/Blog";

import LanguageController from "../../../components/LanguageController.astro";
import LANGS_SUPPORTED, { ENGLISH, SPANISH } from "../../../utils/langs";

export async function getStaticPaths() {
  return (Blogs as IBlogDefinition[]).flatMap( id => LANGS_SUPPORTED.map( lang => ({ params: { lang, id: id.id } })) );
}

const { lang, id } = Astro.params;
const { title, subtitle, creation_date, update_date, author, duration, poster, fragments, alt } = await GetBlog({ lang, id });

const translation: IBlogPostTranslation = lang === SPANISH ? BlogPostES.blog_post : lang === ENGLISH ? BlogPostEN.blog_post : BlogPostCH.blog_post;
const routes = [
  { text: 'Brayan Téllez', href: '/' },
  { text: translation.section, href: `/${lang}/blogs` },
  { text: title, href: `/${lang}/blogs/${id}` }
];
---
<Template includes={['lang-buttons', 'blogpost']} lang={lang} title={`Brayan Téllez | ${title}`}>
    <Breadcrumb routes={routes}/>
    <LanguageController lang={lang}/>
    <article id="main" itemscope itemtype="https://schema.org/BlogPosting">
        <h1 itemprop="headline">{title}</h1>
        <meta itemprop="datePublished" content={creation_date}>
        <meta itemprop="dateModified" content={update_date}>
        
        <h2 itemprop="description">{subtitle}</h2>
        
        <div itemprop="author" itemscope itemtype="https://schema.org/Person">
          <span itemprop="name">{author}</span>
        </div>
        <span class="extra">{translation.duration}: {duration} {translation.time}.</span>
        <span class="extra">{translation.publish}: {update_date}.</span>

        <meta itemprop="timeRequired" content={`PT${duration}M`}>
        <img src={`/assets/blogs/${id}/${poster}`} alt={alt} class="poster" width="100%">

        <main itemprop="articleBody">
            {
              (fragments??[]).map( fragment => 
                <PostFragment {...fragment} id={id}/>
              )
            }
        </main>
    </article>
</Template>